// Generated by CoffeeScript 1.7.1
(function() {
  var Nohm, Record, VIEW_RECYCLE_INTERVAL, VIEW_RECYCLE_QUATITY, VIEW_TTL, assert, extend, hasher, recycle_views, require_tree,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Nohm = require("nohm").Nohm;

  assert = require('assert');

  hasher = require('./hasher');

  require_tree = require('require_tree');

  extend = function() {
    var dest, k, obj, objs, v, _i, _len;
    dest = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      for (k in obj) {
        v = obj[k];
        dest[k] = v;
      }
    }
    return dest;
  };

  VIEW_TTL = 300000;

  VIEW_RECYCLE_INTERVAL = 600000;

  VIEW_RECYCLE_QUATITY = 1000;

  recycle_views = function() {
    var ids;
    ids = Object.keys(Record.views);
    ids = ids.slice(0, VIEW_RECYCLE_TARGET);
    return ids.forEach(function(name) {
      return delete Record.views[name];
    });
  };

  setTimeout(recycle_views, VIEW_RECYCLE_INTERVAL);

  Record = (function(_super) {
    __extends(Record, _super);

    function Record() {
      return Record.__super__.constructor.apply(this, arguments);
    }

    Record.views = {};

    Record.levels = {};

    Record.getModel = function(name) {
      return this.getModels()[name];
    };

    Record.configure = function(options) {
      assert(options.redis, "Set redis client first");
      assert(options.models, "Set model directory");
      return options.redis.on('connect', function() {

        /*
        if options.models.charAt(0) isnt "/"
          model.parent
         */
        var _ref;
        require_tree(options.models);
        this.setClient(redis);
        this.setPrefix(options.prefix);
        return (_ref = options.connect) != null ? _ref.call(this) : void 0;
      });
    };

    Record.model = function(name, options) {
      var levels, model, orig;
      if (options.methods == null) {
        options.methods = {};
      }
      if (options["extends"] == null) {
        options["extends"] = {};
      }
      options.methods = extend(options.methods, this._methods);
      model = Nohm.model(name, options);
      model = extend(model, this._extends, options["extends"]);
      model.prototype.modelName = name;
      model.keepalive = new Date().getTime();
      model.viewDefinition = options.properties.view || null;
      model.levelDefinition = options.properties.levels || null;
      if (model.levelDefinition) {
        if (Array.isArray(model.levelDefinition)) {
          levels = model.levelDefinition;
        } else if (typeof model.levelDefinition === 'object') {
          levels = Object.keys(model.levelDefinition);
        } else {
          throw new Error("wrong type of level definition");
        }
        levels.forEach(function(lv) {
          var level, modelName;
          modelName = "" + name + ":level:" + lv;
          level = extend({}, model);
          level.prototype.modelName = modelName;
          return Record.levels[modelName] = level;
        });
      }
      orig = model.prototype.find;
      model.prototype.find = function(searches, callback) {
        if (this.getClient().shardable && searches && typeof searches !== 'function' && Object.keys(searches).length > 1) {
          return this.logError("cannot search more one criteria with redism");
        }
        return orig.applay(this, arguments);
      };
      orig = model.prototype.sort;
      model.prototype.sort = function(options, ids) {
        var field_type, scored;
        if (this.getClient().shardable) {
          field_type = this.properties[options.field].type;
          scored = Nohm.indexNumberTypes.indexOf(field_type) !== -1;
          if (!scored) {
            return this.logError("cannot sort on non-numeric fields with redism");
          }
        }
        return orig.applay(this, arguments);
      };
      return model;
    };

    Record._methods = {};

    Record._extends = {
      level: function(lv) {
        var level, modelName;
        if (this.levelDefinition == null) {
          return this.logError("No level definition found");
        }
        modelName = "" + this.modelName + ":level:" + id;
        level = this.levels[modelName];
        if (!level) {
          level = extend({}, this);
          level.prototype.modelName = modelName;
          this.levels[modelName] = level;
        }
        return level;
      },
      view: function(id) {
        var modelName, view;
        if (this.viewDefinition == null) {
          return this.logError("No view definition found");
        }
        modelName = "" + this.modelName + ":view:" + id;
        view = this.views[modelName];
        if (!view) {
          view = extend({}, this);
          view.prototype.modelName = modelName;
          this.views[modelName] = view;
        }
        return view;
      },
      getClient: function() {
        return Nohm.client;
      },
      getHashKey: function(id) {
        return "" + Nohm.prefix.hash + this.modelName + ":" + id;
      },
      get: function(criteria, callback) {
        return this.findAndLoad(criteria, function(err, objs) {
          if (err) {
            return callback(err);
          }
          if (objs.length === 1) {
            return callback.call(objs[0], null, objs[0].allProperties());
          } else {
            return callback.call(null, objs);
          }
        });
      },
      ids: function(ids, callback) {
        var count, id, rows, total, _i, _len, _results;
        if (ids.length === 0) {
          return callback(null, []);
        }
        rows = [];
        count = 0;
        total = ids.length;
        _results = [];
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          _results.push(this.load(parseInt(id), function(err, props) {
            if (err) {
              return callback(err);
            }
            rows.push(this.allProperties());
            count++;
            if (count === total) {
              return callback(null, rows);
            }
          }));
        }
        return _results;
      },
      count: function(criteria, callback) {
        var m;
        if (typeof criteria === 'function') {
          callback = criteria;
          criteria = null;
          m = new this;
          return Nohm.client.scard(Nohm.prefix.idsets + m.modelName, function(err, result) {
            if (err) {
              return callback(err);
            }
            return callback(null, result);
          });
        }
        return this.find(criteria, function(err, ids) {
          if (err) {
            return callback(err);
          }
          return callback(null, ids.length);
        });
      },
      index: function(property, callback) {
        var affected_rows, model, multi, new_unique, old_unique;
        if (typeof property === "function") {
          callback = property;
          property = null;
        }
        model = this;
        multi = Nohm.client.multi();
        affected_rows = 0;
        old_unique = [];
        new_unique = [];
        return this.find((function(_this) {
          return function(err, ids) {
            if (err || ids.length < 1) {
              return callback.call(model, err, affected_rows);
            }
            return ids.forEach(function(id, idx) {
              return _this.load(id, function(err, props) {
                var def, p, set_update, _ref;
                if (err) {
                  console.log(id, this.errors);
                }
                set_update = (function(_this) {
                  return function(prop) {
                    var propLower;
                    if (_this.properties[prop].unique) {
                      propLower = _this.properties[prop].type === 'string' ? _this.properties[prop].__oldValue.toLowerCase() : _this.properties[prop].__oldValue;
                      return multi.setnx("" + Nohm.prefix.unique + _this.modelName + ":" + prop + ":" + _this.properties[prop].value, id);
                    } else {
                      return _this.properties[prop].__updated = true;
                    }
                  };
                })(this);
                if (property) {
                  set_update(property);
                } else {
                  _ref = this.properties;
                  for (p in _ref) {
                    def = _ref[p];
                    if (def.index || def.unique) {
                      set_update(p);
                    }
                  }
                }
                return this.save(function(err) {
                  console.log("Indexed " + this.modelName + " on '" + (property || 'all indexed properties') + "' for row id " + this.id);
                  affected_rows += 1;
                  if (idx === ids.length - 1) {
                    multi.exec();
                    return callback.call(model, err, affected_rows);
                  }
                });
              });
            });
          };
        })(this));
      },
      deindex: function(properties, callback) {
        var def, deletes, ins, model, multi, p, _ref;
        model = this;
        multi = Nohm.client.multi();
        deletes = [];
        if (typeof properties === 'function') {
          callback = properties;
          properties = null;
        }
        if (typeof properties === 'string') {
          properties = [properties];
        }
        if (!properties) {
          ins = new model;
          properties = [];
          _ref = ins.properties;
          for (p in _ref) {
            def = _ref[p];
            if (def.index || def.unique) {
              properties.push(p);
            }
          }
        }
        return properties.forEach((function(_this) {
          return function(p, idx) {
            return Nohm.client.keys("" + Nohm.prefix.unique + _this.modelName + ":" + p + ":*", function(err, unique_keys) {
              deletes = unique_keys;
              return Nohm.client.keys("" + Nohm.prefix.index + _this.modelName + ":" + p + ":*", function(err, index_keys) {
                deletes = deletes.concat(index_keys);
                return Nohm.client.keys("" + Nohm.prefix.scoredindex + _this.modelName + ":" + p + ":*", function(err, scoredindex_keys) {
                  deletes = deletes.concat(scoredindex_keys);
                  if (idx === properties.length - 1) {
                    if (deletes.length > 0) {
                      multi.del(deletes);
                    }
                    return multi.exec(function(err, results) {
                      console.log("Deleted " + deletes.length + " related keys for '" + (properties.join(', ')) + "' of " + _this.modelName);
                      return callback.call(model, err, deletes.length);
                    });
                  }
                });
              });
            });
          };
        })(this));
      },
      clean: function(callback) {
        var affected_rows, deletes, model, multi, undefined_properties;
        model = new this;
        multi = Nohm.client.multi();
        deletes = [];
        affected_rows = 0;
        undefined_properties = [];
        return this.find((function(_this) {
          return function(err, ids) {
            if (err || ids.length < 1) {
              return callback.call(_this, err, affected_rows);
            }
            return ids.forEach(function(id, idx) {
              return _this.getClient().hgetall(_this.getHashKey(id), function(err, values) {
                var is_enumerable, is_meta, is_property, keys, p;
                keys = values ? Object.keys(values) : [];
                if (!(Array.isArray(keys) && keys.length > 0 && !err)) {
                  err = 'not found';
                }
                if (err) {
                  Nohm.logError("loading a hash produced an error: " + err);
                  return callback != null ? callback.call(_this, err) : void 0;
                }
                for (p in values) {
                  is_enumerable = values.hasOwnProperty(p);
                  is_meta = p === '__meta_version';
                  is_property = model.properties.hasOwnProperty(p);
                  if (!is_meta && !model.properties.hasOwnProperty(p)) {
                    affected_rows += 1;
                    if (undefined_properties.indexOf(p) === -1) {
                      Nohm.logError("Undefined property '" + p + "' found, will be deleted");
                      undefined_properties.push(p);
                    }
                    multi.hdel(_this.getHashKey(id), p);
                  }
                }
                if (idx === ids.length - 1) {
                  if (!(undefined_properties.length > 0)) {
                    return callback.call(model, err, affected_rows);
                  }
                  multi.exec(function(err, results) {
                    return console.log("Cleaned up undefined properties " + (undefined_properties.join(', ')));
                  });
                  return _this.deindex(undefined_properties, callback);
                }
              });
            });
          };
        })(this));
      }
    };

    Record._methods = null;

    Record.backend = {
      connect: function(req, res, next) {
        var CountHandler, StatsHandler, app, assets, express, template;
        express = require('express');
        assets = require('connect-assets');
        template = require('fuyun-template');
        app = express();
        app.locals.title = "Nohm Backend";
        StatsHandler = function(req, res, next) {
          return Nohm.client.info(function(err, result) {
            if (!err) {
              res.locals.stats = result;
            }
            return next(err);
          });
        };
        CountHandler = function(req, res, next) {
          var counter, model, models, name, output, total, _count, _results;
          models = Record.getModels();
          total = Object.keys(models).length;
          output = {};
          counter = 0;
          _count = function(name) {
            return model.count(function(err, count) {
              counter += 1;
              if (err) {
                return next(err);
              }
              output[name] = count;
              if (counter === total) {
                res.locals.count = output;
                return next();
              }
            });
          };
          _results = [];
          for (name in models) {
            model = models[name];
            _results.push(_count(name));
          }
          return _results;
        };
        app.configure(function() {
          app.set('view engine', 'jade');
          app.set('views', "" + __dirname + "/../views");
          app.use(express.favicon("" + __dirname + "/../public/images/favicon.png"));
          app.use(express.compress());
          app.use(express.methodOverride());
          app.use(express.json({
            strict: false
          }));
          app.use(express.urlencoded());
          app.use(express.cookieParser());
          app.use(express["static"]("" + __dirname + "/../public"));
          return app.use(app.router);
        });
        app.on('mount', function(parent) {
          parent.nohm_backend = app;
          app.locals.base_uri = app.path();
          app.locals.models = JSON.stringify(Object.keys(Record.getModels()));
          app.use(assets({
            src: "" + __dirname + "/../public",
            helperContext: app.locals,
            servePath: app.path()
          }));
          app.use(Record.connect({
            url: "/validator.js",
            namespace: 'validator'
          }));
          template.setup("app", {
            prefix: "" + (app.path()) + "/templates"
          });
          template.attach(app);
          return app.use("/templates", template.connect());
        });
        app.get("/schema/:name", function(req, res) {
          var def, ins, model, name, schema, _ref;
          if (!req.params.name) {
            return res.status(404);
          }
          schema = {};
          model = Record.getModels()[req.params.name];
          ins = new model;
          _ref = ins.properties;
          for (name in _ref) {
            def = _ref[name];
            if (typeof def.type === "function") {
              def.type = def.type.toString();
            }
            if (typeof def.defaultValue === "function") {
              def.defaultValue = def.defaultValue.toString();
            }
            schema[name] = {
              type: def.type,
              index: def.index,
              unique: def.unique,
              "default": def.defaultValue
            };
          }
          return res.send(JSON.stringify({
            name: req.params.name,
            schema: schema
          }));
        });
        app.get("/record/:model/page/:page", function(req, res) {
          var model, number_per_page, page, schema;
          if (!req.params.model) {
            return res.status(404);
          }
          page = req.params.page || 1;
          number_per_page = 30;
          model = Record.getModels()[req.params.name];
          model.sort({
            field: 'created_at',
            direction: 'DESC',
            start: (page - 1) * number_per_page,
            limit: number_per_page
          }, function(err, ids) {
            var all, counter, total;
            if (err) {
              return res.status(500);
            }
            all = [];
            counter = 0;
            total = ids.length;
            return ids.forEach(function(id) {
              return model.load(id, function(err, props) {
                counter += 1;
                if (err) {
                  return;
                }
                props.id = this.id;
                all.push(props);
                if (counter === total) {
                  return res.send(all);
                }
              });
            });
          });
          schema = Record.getModels()[req.params.name]['properties'];
          console.log(schema);
          return res.send(JSON.stringify(schema));
        });
        app.get("/stats", StatsHandler, function(req, res) {
          return res.send(JSON.stringify(res.locals.stats));
        });
        app.get("/count", CountHandler, function(req, res) {
          return res.send(JSON.stringify(res.locals.count));
        });
        return app.get("/", StatsHandler, CountHandler, function(req, res) {
          return res.render("layout", function(err, html) {
            if (err) {
              return console.log(err);
            }
            html = html.replace('{models}', JSON.stringify(res.locals.count));
            html = html.replace('{stats}', JSON.stringify(res.locals.stats));
            return res.send(html);
          });
        });
      }
    };

    return Record;

  })(Nohm);

  module.exports = Record;

}).call(this);
