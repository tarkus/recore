// Generated by CoffeeScript 1.3.3
(function() {
  var Nohm, NohmExtend,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Nohm = require('nohm').Nohm;

  NohmExtend = (function(_super) {

    __extends(NohmExtend, _super);

    function NohmExtend() {
      return NohmExtend.__super__.constructor.apply(this, arguments);
    }

    NohmExtend.model = function(name, options) {
      var k, model, v, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if ((_ref = options.methods) == null) {
        options.methods = {};
      }
      if ((_ref1 = options["extends"]) == null) {
        options["extends"] = {};
      }
      _ref2 = this._methods;
      for (k in _ref2) {
        v = _ref2[k];
        this.methods[k] = v;
      }
      _ref3 = options.methods;
      for (k in _ref3) {
        v = _ref3[k];
        this.methods[k] = v;
      }
      options.methods = this.methods;
      _ref4 = this._extends;
      for (k in _ref4) {
        v = _ref4[k];
        this["extends"][k] = v;
      }
      _ref5 = options["extends"];
      for (k in _ref5) {
        v = _ref5[k];
        this["extends"][k] = v;
      }
      model = Nohm.model(name, options);
      _ref6 = this["extends"];
      for (k in _ref6) {
        v = _ref6[k];
        model[k] = v;
      }
      return model;
    };

    NohmExtend["extends"] = {};

    NohmExtend.methods = {};

    NohmExtend._extends = {
      get: function(criteria, callback) {
        return this.find(criteria, function(err, ids) {
          if (err) {
            return callback(err);
          }
          if (ids.length === 1) {
            return this.load(ids[0], function(err) {
              if (err) {
                return callback(err);
              }
              return callback(null, this.allProperties());
            });
          } else {
            return Nohm.loadSome.call(this, [ids, callback]);
          }
        });
      },
      loadSome: function(ids, callback) {
        var count, id, rows, total, _i, _len, _results;
        if (ids.length === 0) {
          return callback(null, ids);
        }
        rows = [];
        count = 0;
        total = ids.length;
        _results = [];
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          _results.push(this.load(id, function(err) {
            if (err) {
              return callback(err);
            }
            rows.push(this.allProperties());
            count++;
            if (count === total) {
              return callback(null, rows);
            }
          }));
        }
        return _results;
      },
      count: function(criteria, callback) {
        var m;
        if (typeof criteria === 'function') {
          callback = criteria;
          criteria = null;
          m = new this;
          return Nohm.client.scard(Nohm.prefix.idsets + m.modelName, function(err, result) {
            if (err) {
              return callback(err);
            }
            return callback(null, result);
          });
        }
        return this.find(criteria, function(err, ids) {
          if (err) {
            return callback(err);
          }
          return callback(null, ids.length);
        });
      },
      ids: function(criteria, callback) {
        var ids, m, op, value, _criteria;
        ids = [];
        _criteria = {
          search: '',
          direction: 'DESC',
          amount: 30
        };
        if (typeof criteria === "string") {
          criteria = {
            search: criteria
          };
        }
        __extends(_criteria, criteria);
        m = _criteria.search.match(/([<|>|=]=?)\s*(\d+)/);
        if (m.length !== 3) {
          return callback('invalid params');
        }
        op = m[1];
        value = m[2].toString();
        return this.find(function(err, ids) {
          var idx, max, result, start, stop;
          if (err) {
            return callback(err);
          }
          max = ids.length - 1;
          idx = ids.indexOf(value);
          if (idx === -1) {
            return callback('not found');
          }
          if (op[0] === '>') {
            if ((op[1] != null) && op[1] === '=') {
              start = Math.min(max, idx);
            } else {
              start = Math.min(max, idx + 1);
            }
            if (start === max) {
              return callback(null, []);
            }
            result = ids.slice(start);
          }
          if (op[0] === '<') {
            if ((op[1] != null) && op[1] === '=') {
              stop = Math.max(max, idx);
            } else {
              stop = Math.max(0, idx - 1);
            }
            if (stop === 0) {
              return callback(null, []);
            }
            result = ids.slice(0, stop + 1 || 9e9);
          }
          if (_criteria.direction === "DESC") {
            result.reverse();
          }
          return callback(null, result.slice(0, _criteria.amount));
        });
      }
    };

    NohmExtend._methods = {
      save: function(cb) {
        var _cb,
          _this = this;
        _cb = function(err) {
          return cb != null ? cb.call(_this, err) : void 0;
        };
        return this._super_save.call(this, _cb);
      },
      allProperties: function(stringify) {
        var props;
        props = this._super_allProperties.call(this);
        if (props.id != null) {
          props.id = parseInt(props.id);
        }
        if (stringify != null) {
          return JSON.stringify(props);
        } else {
          return props;
        }
      }
    };

    return NohmExtend;

  })(Nohm);

  module.exports = NohmExtend;

}).call(this);
