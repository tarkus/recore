// Generated by CoffeeScript 1.6.3
(function() {
  var Nohm, NohmExtend, extend, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (module.parent != null) {
    Nohm = module.parent.require('nohm').Nohm;
  } else {
    Nohm = require("nohm").Nohm;
  }

  extend = function() {
    var dest, k, obj, objs, v, _i, _len;
    dest = arguments[0], objs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      obj = objs[_i];
      for (k in obj) {
        v = obj[k];
        dest[k] = v;
      }
    }
    return dest;
  };

  NohmExtend = (function(_super) {
    __extends(NohmExtend, _super);

    function NohmExtend() {
      _ref = NohmExtend.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NohmExtend.model = function(name, options) {
      var model;
      if (options.methods == null) {
        options.methods = {};
      }
      if (options["extends"] == null) {
        options["extends"] = {};
      }
      options.methods = extend(options.methods, this._methods);
      model = Nohm.model(name, options);
      model = extend(model, this._extends, options["extends"]);
      model.modelName = name;
      return model;
    };

    NohmExtend._extends = {
      getClient: function() {
        return Nohm.client;
      },
      getHashKey: function(id) {
        return "" + Nohm.prefix.hash + this.modelName + ":" + id;
      },
      get: function(criteria, callback) {
        return this.findAndLoad(criteria, function(err, objs) {
          if (err) {
            return callback(err);
          }
          if (objs.length === 1) {
            return callback.call(objs[0], null, objs[0].allProperties());
          } else {
            return callback.call(null, objs);
          }
        });
      },
      ids: function(ids, callback) {
        var count, id, rows, total, _i, _len, _results;
        if (ids.length === 0) {
          return callback(null, []);
        }
        rows = [];
        count = 0;
        total = ids.length;
        _results = [];
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          _results.push(this.load(parseInt(id), function(err, props) {
            if (err) {
              return callback(err);
            }
            rows.push(this.allProperties());
            count++;
            if (count === total) {
              return callback(null, rows);
            }
          }));
        }
        return _results;
      },
      count: function(criteria, callback) {
        var m;
        if (typeof criteria === 'function') {
          callback = criteria;
          criteria = null;
          m = new this;
          return Nohm.client.scard(Nohm.prefix.idsets + m.modelName, function(err, result) {
            if (err) {
              return callback(err);
            }
            return callback(null, result);
          });
        }
        return this.find(criteria, function(err, ids) {
          if (err) {
            return callback(err);
          }
          return callback(null, ids.length);
        });
      },
      index: function(property, callback) {
        var affected_rows, conn, model,
          _this = this;
        if (typeof property === "function") {
          callback = property;
          property = null;
        }
        model = this;
        conn = Nohm.client;
        affected_rows = 0;
        return this.find(function(err, ids) {
          if (err || ids.length < 1) {
            return callback.call(model, err, affected_rows);
          }
          return ids.forEach(function(id, idx) {
            return _this.load(id, function(err, props) {
              var def, p, propLower, _ref1;
              if (err) {
                console.log(this.errors);
              }
              if (property) {
                this.properties[property].__updated = true;
              } else {
                _ref1 = this.properties;
                for (p in _ref1) {
                  def = _ref1[p];
                  if (!(def.index || def.unique)) {
                    continue;
                  }
                  this.properties[p].__updated = true;
                  if (this.__inDB) {
                    propLower = this.properties[p].type === 'string' ? this.properties[p].__oldValue.toLowerCase() : this.properties[p].__oldValue;
                    conn.del("" + Nohm.prefix.unique + this.modelName + ":" + p + ":" + propLower, Nohm.logError);
                  }
                }
              }
              return this.save(function(err) {
                if (err) {
                  console.log(this.errors);
                }
                console.log("Indexed " + this.modelName + " on '" + (property || 'all indexed properties') + "' for row id " + this.id);
                affected_rows += 1;
                if (idx === ids.length - 1) {
                  return callback.call(model, err, affected_rows);
                }
              });
            });
          });
        });
      },
      deindex: function(properties, callback) {
        var def, deletes, ins, model, multi, p, _ref1,
          _this = this;
        model = this;
        multi = Nohm.client.multi();
        deletes = [];
        if (typeof properties === 'function') {
          callback = properties;
          properties = null;
        }
        if (typeof properties === 'string') {
          properties = [properties];
        }
        if (!properties) {
          ins = new model;
          properties = [];
          _ref1 = ins.properties;
          for (p in _ref1) {
            def = _ref1[p];
            if (def.index || def.unique) {
              properties.push(p);
            }
          }
        }
        return properties.forEach(function(p, idx) {
          return Nohm.client.keys("" + Nohm.prefix.unique + _this.modelName + ":" + p + ":*", function(err, unique_keys) {
            deletes = unique_keys;
            return Nohm.client.keys("" + Nohm.prefix.index + _this.modelName + ":" + p + ":*", function(err, index_keys) {
              deletes = deletes.concat(index_keys);
              return Nohm.client.keys("" + Nohm.prefix.scoredindex + _this.modelName + ":" + p + ":*", function(err, scoredindex_keys) {
                deletes = deletes.concat(scoredindex_keys);
                if (idx === properties.length - 1) {
                  if (deletes.length > 0) {
                    multi.del(deletes);
                  }
                  return multi.exec(function(err, results) {
                    console.log("Deleted " + deletes.length + " related keys for '" + (properties.join(', ')) + "' of " + _this.modelName);
                    return callback.call(model, err, deletes.length);
                  });
                }
              });
            });
          });
        });
      },
      clean: function(callback) {
        var affected_rows, deletes, model, multi, undefined_properties,
          _this = this;
        model = new this;
        multi = Nohm.client.multi();
        deletes = [];
        affected_rows = 0;
        undefined_properties = [];
        return this.find(function(err, ids) {
          if (err || ids.length < 1) {
            return callback.call(_this, err, affected_rows);
          }
          return ids.forEach(function(id, idx) {
            return _this.getClient().hgetall(_this.getHashKey(id), function(err, values) {
              var is_enumerable, is_meta, is_property, keys, p;
              keys = values ? Object.keys(values) : [];
              if (!(Array.isArray(keys) && keys.length > 0 && !err)) {
                err = 'not found';
              }
              if (err) {
                Nohm.logError("loading a hash produced an error: " + err);
                return callback != null ? callback.call(_this, err) : void 0;
              }
              for (p in values) {
                is_enumerable = values.hasOwnProperty(p);
                is_meta = p === '__meta_version';
                is_property = model.properties.hasOwnProperty(p);
                if (!is_meta && !model.properties.hasOwnProperty(p)) {
                  affected_rows += 1;
                  if (undefined_properties.indexOf(p) === -1) {
                    Nohm.logError("Undefined property '" + p + "' found, will be deleted");
                    undefined_properties.push(p);
                  }
                  multi.hdel(_this.getHashKey(id), p);
                }
              }
              if (idx === ids.length - 1) {
                if (!(undefined_properties.length > 0)) {
                  return callback.call(model, err, affected_rows);
                }
                multi.exec(function(err, results) {
                  return console.log("Cleaned up undefined properties " + (undefined_properties.join(', ')));
                });
                return _this.unindex(undefined_properties, callback);
              }
            });
          });
        });
      }
    };

    NohmExtend._methods = null;

    return NohmExtend;

  })(Nohm);

  module.exports = NohmExtend;

}).call(this);
